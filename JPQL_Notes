JPQL queries Entities

TypedQuery returns generics

Following queries in SQL translate in JPQL

where
order by
like
between

JOINS
JPQL has joins out of the box

-->Select e.* from Employee e join accesscard a on e.card_id = a.id and a.isactive=true

above sql will translate to JPQL as follows

-->Select e employee e where e.card.isActive=true


Selectively chosing field names of a table/object

-->select e.name from employee e

-->TypedQuery<String> query = entityManager.createQuery('select e.name from employee e', String.class)

When selected multiple fields, one gets an array of object

-->TypedQuery<String> query = entityManager.createQuery('select e.name, e.ssn from employee e', Object[].class) 

return type
List<Object[]> employees

Access each object with foreach
	e[0], e[1] and so on

Do not inject query paratemeters using string concatation
instead use query parameters

int minAge = 25;
select * from employee where e.ade > :minAge
query.setParameter("minAge",minAge	

NAMED QUERIES

@NamedQuery (query="Select e from employee e order by e.name", name="emp name asc")

Query q = entityManager.createNamedQuery("emp name asc", Employee.class)

This also works for parameters


Java 11 supports multiple named queries above entity class as annotations









